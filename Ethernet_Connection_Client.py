import socket

# IP-адрес и порт, на котором Raspberry Pi будет принимать данные
HOST = 'IP_АДРЕС_RASPBERRY_PI'
PORT = 12345

while True:
    # socket.socket - это функция, которая создает объект сокета. Она принимает два аргумента: socket.AF_INET, который указывает на использование протокола IPv4, и socket.SOCK_STREAM, который указывает на использование протокола TCP.
    # Фраза with ... as ... используется для автоматического закрытия ресурсов после завершения работы с ними. В данном случае, после выполнения блока кода внутри конструкции with, сокет будет автоматически закрыт.
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:

        #bind() привязывает сокет к конкретному IP-адресу и порту на устройстве. Она принимает в качестве аргументов IP-адрес и номер порта, к которому вы хотите привязать сокет.
        s.bind((HOST, PORT))
        #listen() говорит сокету начать прослушивание на входящие соединения. Он принимает один аргумент, который указывает максимальное количество ожидающих подключений в очереди.
        s.listen(1)
        print('Ожидание подключения...')

        conn, addr = s.accept()
        print('Подключено к:', addr)

        while True:
            #data = conn.recv(1024) выполняется операция получения данных из сокета conn. recv(1024) указывает, что мы пытаемся прочитать до 1024 байт из сокета conn. Фактически, recv() читает данные из сокета в виде последовательности байтов и сохраняет их в переменной data.
            data = conn.recv(1024)

            if not data:
                break

            print('Принято:', data.decode())

            response = 'Данные получены и обработаны.'

            #conn.sendall(response.encode()) выполняется операция отправки данных через сокет conn.
            #response.encode() используется для преобразования строки response в байтовую последовательность, так как сокеты работают с данными в виде байтов.
            conn.sendall(response.encode())

        conn.close()